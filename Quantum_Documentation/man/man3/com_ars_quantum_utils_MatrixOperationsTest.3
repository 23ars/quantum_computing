.TH "com.ars.quantum.utils.MatrixOperationsTest" 3 "Wed Nov 23 2016" "quantum - computing" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.ars.quantum.utils.MatrixOperationsTest \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetUp\fP ()  throws Exception "
.br
.ti -1c
.RI "void \fBtearDown\fP ()  throws Exception "
.br
.ti -1c
.RI "void \fBtestMatrixAddDoublesDifferentLengths\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixAddComplexDifferentLengths\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixAddDouble\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixAddComplex\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixSubtractDoublesDifferentLengths\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixSubtractComplexDifferentLengths\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixSubtractDouble\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixSubtractComplex\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixDoubleAreNotEqual\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixDoubleAreEqual\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixDoubleDifferentSizes\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixComplexAreNotEqual\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixComplexAreEqual\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixComplexDifferentSizes\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixMultiplyDoubleDifferentSizes\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixMultiplyDouble\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixMultiplyComplexDifferentSizes\fP ()"
.br
.ti -1c
.RI "void \fBtestMatrixMultiplyComplex\fP ()"
.br
.ti -1c
.RI "void \fBtestTensorProduct\fP ()"
.br
.ti -1c
.RI "void \fBtestTensorProductComplex\fP ()"
.br
.ti -1c
.RI "void \fBtestGenerateIdentityMatrix\fP ()"
.br
.ti -1c
.RI "void \fBtestMultiplyByConstant\fP ()"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.setUp () throws Exception"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.tearDown () throws Exception"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testGenerateIdentityMatrix ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixAddComplex ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixAddComplexDifferentLengths ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixAddDouble ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixAddDoublesDifferentLengths ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixComplexAreEqual ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixComplexAreNotEqual ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixComplexDifferentSizes ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixDoubleAreEqual ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixDoubleAreNotEqual ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixDoubleDifferentSizes ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixMultiplyComplex ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixMultiplyComplexDifferentSizes ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixMultiplyDouble ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixMultiplyDoubleDifferentSizes ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixSubtractComplex ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixSubtractComplexDifferentLengths ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixSubtractDouble ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMatrixSubtractDoublesDifferentLengths ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testMultiplyByConstant ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testTensorProduct ()"

.SS "void com\&.ars\&.quantum\&.utils\&.MatrixOperationsTest\&.testTensorProductComplex ()"


.SH "Author"
.PP 
Generated automatically by Doxygen for quantum - computing from the source code\&.
